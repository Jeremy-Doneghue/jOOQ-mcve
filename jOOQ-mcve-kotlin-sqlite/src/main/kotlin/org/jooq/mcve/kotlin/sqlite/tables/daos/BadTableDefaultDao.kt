/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.sqlite.tables.daos


import javax.annotation.processing.Generated

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.jooq.mcve.kotlin.sqlite.tables.BadTable
import org.jooq.mcve.kotlin.sqlite.tables.pojos.BadTablePojo
import org.jooq.mcve.kotlin.sqlite.tables.records.BadTableRecord


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.10"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class BadTableDefaultDao(configuration: Configuration?) : DAOImpl<BadTableRecord, BadTablePojo, Int>(BadTable.BAD_TABLE, BadTablePojo::class.java, configuration) {

    /**
     * Create a new BadTableDefaultDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: BadTablePojo): Int? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Int?, upperInclusive: Int?): List<BadTablePojo> = fetchRange(BadTable.BAD_TABLE.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Int): List<BadTablePojo> = fetch(BadTable.BAD_TABLE.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Int): BadTablePojo? = fetchOne(BadTable.BAD_TABLE.ID, value)

    /**
     * Fetch records that have <code>cd BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCd(lowerInclusive: String?, upperInclusive: String?): List<BadTablePojo> = fetchRange(BadTable.BAD_TABLE.CD, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>cd IN (values)</code>
     */
    fun fetchByCd(vararg values: String): List<BadTablePojo> = fetch(BadTable.BAD_TABLE.CD, *values)

    /**
     * Fetch records that have <code>e BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfE(lowerInclusive: Int?, upperInclusive: Int?): List<BadTablePojo> = fetchRange(BadTable.BAD_TABLE.E, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>e IN (values)</code>
     */
    fun fetchByE(vararg values: Int): List<BadTablePojo> = fetch(BadTable.BAD_TABLE.E, *values.toTypedArray())
}
