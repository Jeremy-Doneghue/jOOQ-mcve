/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.sqlite.tables.records


import javax.annotation.processing.Generated

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.mcve.kotlin.sqlite.tables.GoodTable
import org.jooq.mcve.kotlin.sqlite.tables.pojos.GoodTablePojo


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.10"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class GoodTableRecord() : UpdatableRecordImpl<GoodTableRecord>(GoodTable.GOOD_TABLE) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var cd: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised GoodTableRecord
     */
    constructor(id: Int? = null, cd: String? = null): this() {
        this.id = id
        this.cd = cd
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised GoodTableRecord
     */
    constructor(value: GoodTablePojo?): this() {
        if (value != null) {
            this.id = value.id
            this.cd = value.cd
            resetChangedOnNotNull()
        }
    }
}
