/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.sqlite.tables


import javax.annotation.processing.Generated

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.mcve.kotlin.sqlite.DefaultSchema
import org.jooq.mcve.kotlin.sqlite.keys.GOOD_TABLE__PK_GOOD_TABLE
import org.jooq.mcve.kotlin.sqlite.keys.GOOD_TABLE__UK_GOOD_TABLE_63030201
import org.jooq.mcve.kotlin.sqlite.tables.records.GoodTableRecord


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.10"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class GoodTable(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, GoodTableRecord>?,
    parentPath: InverseForeignKey<out Record, GoodTableRecord>?,
    aliased: Table<GoodTableRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<GoodTableRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>good_table</code>
         */
        val GOOD_TABLE: GoodTable = GoodTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GoodTableRecord> = GoodTableRecord::class.java

    /**
     * The column <code>good_table.id</code>.
     */
    val ID: TableField<GoodTableRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.identity(true), this, "")

    /**
     * The column <code>good_table.cd</code>.
     */
    val CD: TableField<GoodTableRecord, String?> = createField(DSL.name("cd"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<GoodTableRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<GoodTableRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<GoodTableRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>good_table</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>good_table</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>good_table</code> table reference
     */
    constructor(): this(DSL.name("good_table"), null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<GoodTableRecord, Int?> = super.getIdentity() as Identity<GoodTableRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<GoodTableRecord> = GOOD_TABLE__PK_GOOD_TABLE
    override fun getUniqueKeys(): List<UniqueKey<GoodTableRecord>> = listOf(GOOD_TABLE__UK_GOOD_TABLE_63030201)
    override fun `as`(alias: String): GoodTable = GoodTable(DSL.name(alias), this)
    override fun `as`(alias: Name): GoodTable = GoodTable(alias, this)
    override fun `as`(alias: Table<*>): GoodTable = GoodTable(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): GoodTable = GoodTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GoodTable = GoodTable(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): GoodTable = GoodTable(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): GoodTable = GoodTable(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): GoodTable = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): GoodTable = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): GoodTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): GoodTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): GoodTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): GoodTable = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): GoodTable = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): GoodTable = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): GoodTable = where(DSL.notExists(select))
}
