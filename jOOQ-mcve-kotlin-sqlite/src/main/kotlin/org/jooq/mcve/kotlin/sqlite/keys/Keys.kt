/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.sqlite.keys


import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.mcve.kotlin.sqlite.tables.BadTable
import org.jooq.mcve.kotlin.sqlite.tables.GoodTable
import org.jooq.mcve.kotlin.sqlite.tables.records.BadTableRecord
import org.jooq.mcve.kotlin.sqlite.tables.records.GoodTableRecord



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val BAD_TABLE__PK_BAD_TABLE: UniqueKey<BadTableRecord> = Internal.createUniqueKey(BadTable.BAD_TABLE, DSL.name("pk_bad_table"), arrayOf(BadTable.BAD_TABLE.ID), true)
val BAD_TABLE__UK_BAD_TABLE_79051120: UniqueKey<BadTableRecord> = Internal.createUniqueKey(BadTable.BAD_TABLE, DSL.name("uk_bad_table_79051120"), arrayOf(BadTable.BAD_TABLE.CD, BadTable.BAD_TABLE.E), true)
val GOOD_TABLE__PK_GOOD_TABLE: UniqueKey<GoodTableRecord> = Internal.createUniqueKey(GoodTable.GOOD_TABLE, DSL.name("pk_good_table"), arrayOf(GoodTable.GOOD_TABLE.ID), true)
val GOOD_TABLE__UK_GOOD_TABLE_63030201: UniqueKey<GoodTableRecord> = Internal.createUniqueKey(GoodTable.GOOD_TABLE, DSL.name("uk_good_table_63030201"), arrayOf(GoodTable.GOOD_TABLE.CD), true)
