/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.sqlite.tables.daos


import javax.annotation.processing.Generated

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.jooq.mcve.kotlin.sqlite.tables.GoodTable
import org.jooq.mcve.kotlin.sqlite.tables.pojos.GoodTablePojo
import org.jooq.mcve.kotlin.sqlite.tables.records.GoodTableRecord


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.10"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class GoodTableDefaultDao(configuration: Configuration?) : DAOImpl<GoodTableRecord, GoodTablePojo, Int>(GoodTable.GOOD_TABLE, GoodTablePojo::class.java, configuration) {

    /**
     * Create a new GoodTableDefaultDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: GoodTablePojo): Int? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Int?, upperInclusive: Int?): List<GoodTablePojo> = fetchRange(GoodTable.GOOD_TABLE.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Int): List<GoodTablePojo> = fetch(GoodTable.GOOD_TABLE.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Int): GoodTablePojo? = fetchOne(GoodTable.GOOD_TABLE.ID, value)

    /**
     * Fetch records that have <code>cd BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCd(lowerInclusive: String?, upperInclusive: String?): List<GoodTablePojo> = fetchRange(GoodTable.GOOD_TABLE.CD, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>cd IN (values)</code>
     */
    fun fetchByCd(vararg values: String): List<GoodTablePojo> = fetch(GoodTable.GOOD_TABLE.CD, *values)

    /**
     * Fetch a unique record that has <code>cd = value</code>
     */
    fun fetchOneByCd(value: String): GoodTablePojo? = fetchOne(GoodTable.GOOD_TABLE.CD, value)
}
