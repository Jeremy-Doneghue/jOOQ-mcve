/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.scala.sqlite.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.mcve.scala.sqlite.DefaultSchema
import org.jooq.mcve.scala.sqlite.Keys
import org.jooq.mcve.scala.sqlite.tables.records.TestRecord

import scala.Array


object Test {

  /**
   * The reference instance of <code>test</code>
   */
  val TEST = new Test
}

/**
 * This class is generated by jOOQ.
 */
class Test(
  alias: Name,
  child: Table[_ <: Record],
  path: ForeignKey[_ <: Record, TestRecord],
  aliased: Table[TestRecord],
  parameters: Array[ Field[_] ]
)
extends TableImpl[TestRecord](
  alias,
  DefaultSchema.DEFAULT_SCHEMA,
  child,
  path,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.table
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[TestRecord] = classOf[TestRecord]

  /**
   * The column <code>test.id</code>.
   */
  val ID: TableField[TestRecord, Integer] = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), "")

  /**
   * The column <code>test.cd</code>.
   */
  val CD: TableField[TestRecord, Integer] = createField(DSL.name("cd"), SQLDataType.INTEGER, "")

  private def this(alias: Name, aliased: Table[TestRecord]) = this(alias, null, null, aliased, null)

  /**
   * Create an aliased <code>test</code> table reference
   */
  def this(alias: String) = this(DSL.name(alias), org.jooq.mcve.scala.sqlite.tables.Test.TEST)

  /**
   * Create an aliased <code>test</code> table reference
   */
  def this(alias: Name) = this(alias, org.jooq.mcve.scala.sqlite.tables.Test.TEST)

  /**
   * Create a <code>test</code> table reference
   */
  def this() = this(DSL.name("test"), null)

  def this(child: Table[_ <: Record], key: ForeignKey[_ <: Record, TestRecord]) = this(Internal.createPathAlias(child, key), child, key, org.jooq.mcve.scala.sqlite.tables.Test.TEST, null)

  override def getSchema: Schema = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA

  override def getIdentity: Identity[TestRecord, Integer] = super.getIdentity.asInstanceOf[ Identity[TestRecord, Integer] ]

  override def getPrimaryKey: UniqueKey[TestRecord] = Keys.TEST__PK_TEST
  override def as(alias: String): Test = new Test(DSL.name(alias), this)
  override def as(alias: Name): Test = new Test(alias, this)
  override def as(alias: Table[_]): Test = new Test(alias.getQualifiedName(), this)

  /**
   * Rename this table
   */
  override def rename(name: String): Test = new Test(DSL.name(name), null)

  /**
   * Rename this table
   */
  override def rename(name: Name): Test = new Test(name, null)

  /**
   * Rename this table
   */
  override def rename(name: Table[_]): Test = new Test(name.getQualifiedName(), null)

  // -------------------------------------------------------------------------
  // Row2 type methods
  // -------------------------------------------------------------------------
  override def fieldsRow: Row2[Integer, Integer] = super.fieldsRow.asInstanceOf[ Row2[Integer, Integer] ]

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
   */
  def mapping[U](from: (Integer, Integer) => U): SelectField[U] = convertFrom(r => from.apply(r.value1(), r.value2()))

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Class,
   * Function)}.
   */
  def mapping[U](toType: Class[U], from: (Integer, Integer) => U): SelectField[U] = convertFrom(toType,r => from.apply(r.value1(), r.value2()))
}
